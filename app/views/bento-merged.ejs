<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bento Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Noto+Serif+JP:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* Global styles */
        :root {
            --primary-color: #FF6B6B;
            --secondary-color: #4361EE;
            --accent-color: #9C27B0;
            --text-color: #2D3748;
            --light-text: #F7FAFC;
            --bg-color: #EDF2F7;
            --shadow-color: rgba(0, 0, 0, 0.15);
            --blur-amount: 12px;
            --border-radius: 20px;
            --grid-gap: 25px;
            --transition-speed: 0.4s;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        body {
            background-color: var(--bg-color);
            background-image: 
                radial-gradient(circle at 10% 20%, rgba(255, 107, 107, 0.12) 0%, transparent 25%),
                radial-gradient(circle at 90% 60%, rgba(67, 97, 238, 0.12) 0%, transparent 25%),
                radial-gradient(circle at 50% 80%, rgba(156, 39, 176, 0.12) 0%, transparent 25%);
            min-height: 100vh;
            padding: 20px;
            color: var(--text-color);
            transition: background-color 0.5s ease;
        }

        body.dark-mode {
            --bg-color: #1A202C;
            --text-color: #E2E8F0;
            --shadow-color: rgba(0, 0, 0, 0.25);
            background-color: var(--bg-color);
        }

        h1, h2, h3, h4 {
            font-weight: 700;
        }

        .app-container {
            max-width: 1400px;
            margin: 0 auto;
        }

        /* Header styling */
        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            position: relative;
            z-index: 10;
        }

        .header-title h1 {
            font-size: 2.2rem;
            font-weight: 700;
            display: inline-flex;
            align-items: center;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-right: 10px;
        }

        .header-emoji {
            display: inline-flex;
            margin-left: 8px;
            margin-right: 4px;
            transform: translateY(2px);
            font-size: 1.8rem;
        }

        .header-title p {
            font-size: 1.05rem;
            opacity: 0.8;
            margin-top: 8px;
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            line-height: 1.6;
        }

        .highlight-text {
            background: linear-gradient(120deg, rgba(255, 107, 107, 0.2), rgba(67, 97, 238, 0.2));
            padding: 2px 8px;
            border-radius: 4px;
            margin: 0 4px;
            color: var(--text-color);
            font-weight: 500;
        }

        .dark-mode .highlight-text {
            background: linear-gradient(120deg, rgba(255, 107, 107, 0.3), rgba(67, 97, 238, 0.3));
            color: var(--light-text);
        }

        /* Text with emoji styles for widgets */
        .widget-title-with-emoji {
            display: flex;
            align-items: center;
            gap: 8px;
            font-weight: 700;
            font-size: 18px;
            margin-bottom: 15px;
        }

        .widget-emoji {
            font-size: 22px;
            display: inline-block;
            transform: translateY(1px);
        }

        .widget-meta {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-top: 10px;
            color: rgba(45, 55, 72, 0.7);
            font-size: 13px;
        }

        .dark-mode .widget-meta {
            color: rgba(226, 232, 240, 0.7);
        }

        .widget-tag {
            background: rgba(255, 255, 255, 0.3);
            backdrop-filter: blur(4px);
            -webkit-backdrop-filter: blur(4px);
            padding: 4px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            color: var(--text-color);
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }

        .dark-mode .widget-tag {
            background: rgba(30, 41, 59, 0.5);
            color: var(--light-text);
        }

        .widget-tag i {
            font-size: 11px;
        }

        .header-controls {
            display: flex;
            gap: 15px;
        }

        /* Button styles */
        .btn {
            padding: 10px 16px;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            border: none;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            box-shadow: 0 4px 12px rgba(67, 97, 238, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(67, 97, 238, 0.4);
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.8);
            color: var(--text-color);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.9);
            transform: translateY(-2px);
        }

        /* Dark mode toggle */
        .dark-mode-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 100;
            background: rgba(255, 255, 255, 0.2);
            border: none;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .dark-mode-toggle i {
            font-size: 20px;
            color: var(--text-color);
            transition: all 0.3s ease;
        }

        .dark-mode-toggle:hover {
            transform: scale(1.1);
        }

        /* Glassmorphism effect base */
        .glass {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(var(--blur-amount));
            -webkit-backdrop-filter: blur(var(--blur-amount));
            border: 1px solid rgba(255, 255, 255, 0.12);
            box-shadow: 
                0 10px 30px 0 var(--shadow-color),
                inset 0 1px 0 0 rgba(255, 255, 255, 0.1);
            border-radius: var(--border-radius);
            transition: all var(--transition-speed) cubic-bezier(0.165, 0.84, 0.44, 1);
        }

        .dark-mode .glass {
            background: rgba(30, 41, 59, 0.4);
            border: 1px solid rgba(255, 255, 255, 0.08);
        }

        /* Bento Grid Container */
        .bento-container {
            display: grid;
            grid-template-columns: repeat(12, 1fr);
            grid-auto-rows: minmax(100px, auto);
            gap: 20px;
            position: relative;
            min-height: 800px;
            perspective: 1200px;
            transition: all 0.5s cubic-bezier(0.165, 0.84, 0.44, 1);
            padding: 10px;
        }

        /* Predefined widget sizes and positions */
        .widget.small {
            grid-column: span the 3;
            grid-row: span 2;
        }

        .widget.medium {
            grid-column: span 4;
            grid-row: span 3;
        }

        .widget.large {
            grid-column: span 6;
            grid-row: span 4;
        }

        .widget.wide {
            grid-column: span 8;
            grid-row: span 2;
        }

        .widget.tall {
            grid-column: span 3;
            grid-row: span 5;
        }

        .widget.featured {
            grid-column: span 8;
            grid-row: span 5;
        }

        /* Animation for widget appearance */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes floating {
            0% {
                transform: translateY(0px);
            }
            50% {
                transform: translateY(-8px);
            }
            100% {
                transform: translateY(0px);
            }
        }

        .widget {
            animation: fadeInUp 0.6s cubic-bezier(0.2, 0.8, 0.2, 1) forwards;
            animation-delay: calc(var(--index, 0) * 0.1s);
        }

        .widget.floating {
            animation: fadeInUp 0.6s cubic-bezier(0.2, 0.8, 0.2, 1) forwards,
                       floating 6s ease-in-out infinite;
            animation-delay: calc(var(--index, 0) * 0.1s), 1s;
        }

        /* Widget hover effect */
        .widget:hover:not(.dragging):not(.resizing) {
            transform: translateY(-5px) scale(1.02);
            box-shadow: 
                0 15px 35px rgba(0, 0, 0, 0.1),
                inset 0 1px 0 rgba(255, 255, 255, 0.3);
            z-index: 2;
        }

        /* Widget with progress indicator */
        .widget-progress-container {
            height: 6px;
            background: rgba(0, 0, 0, 0.05);
            border-radius: 3px;
            overflow: hidden;
            margin: 15px 0;
        }

        .widget-progress-bar {
            height: 100%;
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            border-radius: 3px;
            width: var(--progress, 0%);
            transition: width 1s cubic-bezier(0.165, 0.84, 0.44, 1);
        }

        .dark-mode .widget-progress-container {
            background: rgba(255, 255, 255, 0.1);
        }

        /* Responsive adjustments */
        @media (max-width: 1200px) {
            .bento-container {
                grid-template-columns: repeat(8, 1fr);
            }
            
            .widget.large, .widget.featured {
                grid-column: span 4;
                grid-row: span 3;
            }
            
            .widget.wide {
                grid-column: span 6;
            }
        }

        @media (max-width: 768px) {
            .bento-container {
                grid-template-columns: repeat(4, 1fr);
                grid-auto-rows: minmax(80px, auto);
                gap: 15px;
            }
            
            .widget.small {
                grid-column: span 2;
                grid-row: span 2;
            }
            
            .widget.medium, .widget.large, .widget.wide, .widget.featured {
                grid-column: span 4;
                grid-row: span 3;
            }
            
            .widget.tall {
                grid-column: span 2;
                grid-row: span 4;
            }
        }

        @media (max-width: 480px) {
            .bento-container {
                grid-template-columns: repeat(2, 1fr);
                gap: 10px;
            }
            
            .widget {
                grid-column: span 2 !important;
                grid-row: span 2 !important;
            }
        }

        /* Widget styling (merges bento-item and widget) */
        .widget {
            padding: 25px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            overflow: hidden;
            position: relative;
            transform-style: preserve-3d;
            transform: translateZ(0);
        }

        /* Updated modern skeuomorphic styles for widgets */
        .widget {
            background: rgba(255, 255, 255, 0.7);
            border-radius: var(--border-radius);
            box-shadow: 
                0 10px 30px 0 var(--shadow-color),
                inset 0 1px 0 0 rgba(255, 255, 255, 0.9);
            transition: all 0.3s cubic-bezier(0.2, 0.8, 0.2, 1);
            background-image: 
                linear-gradient(to bottom, rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0.5));
            border: 1px solid rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(var(--blur-amount));
            -webkit-backdrop-filter: blur(var(--blur-amount));
        }

        .dark-mode .widget {
            background: rgba(30, 41, 59, 0.7);
            background-image: 
                linear-gradient(to bottom, rgba(40, 50, 70, 0.8), rgba(30, 40, 60, 0.6));
            box-shadow: 
                0 10px 30px 0 rgba(0, 0, 0, 0.3),
                inset 0 1px 0 0 rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.05);
        }

        /* Metal shader effect for certain widgets */
        .widget.metal {
            background-image: 
                linear-gradient(145deg, rgba(250, 250, 250, 0.8) 0%, rgba(225, 225, 225, 0.6) 47%, rgba(210, 210, 210, 0.8) 100%);
            box-shadow: 
                0 10px 25px rgba(0, 0, 0, 0.12),
                inset 0 -4px 5px rgba(0, 0, 0, 0.05),
                inset 0 1px 0 rgba(255, 255, 255, 0.8);
            border: 1px solid rgba(200, 200, 200, 0.3);
        }

        .dark-mode .widget.metal {
            background-image: 
                linear-gradient(145deg, rgba(60, 70, 80, 0.8) 0%, rgba(50, 60, 70, 0.6) 47%, rgba(40, 50, 60, 0.8) 100%);
            box-shadow: 
                0 10px 25px rgba(0, 0, 0, 0.2),
                inset 0 -4px 5px rgba(0, 0, 0, 0.1),
                inset 0 1px 0 rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(70, 80, 90, 0.3);
        }

        /* Glass effect for certain widgets */
        .widget.glass {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(calc(var(--blur-amount) * 1.5));
            -webkit-backdrop-filter: blur(calc(var(--blur-amount) * 1.5));
            border: 1px solid rgba(255, 255, 255, 0.3);
            box-shadow: 
                0 15px 35px rgba(0, 0, 0, 0.1),
                inset 0 1px 0 rgba(255, 255, 255, 0.3);
        }

        .dark-mode .widget.glass {
            background: rgba(30, 41, 59, 0.25);
            border: 1px solid rgba(255, 255, 255, 0.05);
            box-shadow: 
                0 15px 35px rgba(0, 0, 0, 0.25),
                inset 0 1px 0 rgba(255, 255, 255, 0.05);
        }

        /* Widget button with tactile feel */
        .widget-button {
            padding: 10px 16px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 10px;
            box-shadow: 
                0 2px 8px rgba(0, 0, 0, 0.1),
                inset 0 -2px 0 rgba(0, 0, 0, 0.05),
                inset 0 1px 0 rgba(255, 255, 255, 0.8);
            border: 1px solid rgba(0, 0, 0, 0.05);
            font-weight: 500;
            font-size: 14px;
            color: var(--text-color);
            cursor: pointer;
            transition: all 0.2s;
            text-align: center;
        }

        .widget-button:active {
            transform: translateY(2px);
            box-shadow: 
                0 1px 2px rgba(0, 0, 0, 0.1),
                inset 0 -1px 0 rgba(0, 0, 0, 0.05);
        }

        .dark-mode .widget-button {
            background: rgba(40, 50, 70, 0.9);
            box-shadow: 
                0 2px 8px rgba(0, 0, 0, 0.2),
                inset 0 -2px 0 rgba(0, 0, 0, 0.1),
                inset 0 1px 0 rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.05);
            color: var(--light-text);
        }

        /* Widget with interactive 3D styling */
        .widget.interactive-3d {
            transform-style: preserve-3d;
            perspective: 1000px;
            transform: translateZ(0);
            transition: transform 0.4s cubic-bezier(0.2, 0.8, 0.2, 1);
        }

        .widget.interactive-3d:hover {
            transform: translateY(-10px) rotateX(2deg) rotateY(2deg) scale(1.03);
        }

        .widget.interactive-3d .widget-content {
            transform: translateZ(20px);
            transition: transform 0.4s cubic-bezier(0.2, 0.8, 0.2, 1);
        }

        .widget.interactive-3d:hover .widget-content {
            transform: translateZ(40px);
        }

        /* Widget title with subtle tactile feel */
        .widget-title {
            font-weight: 700;
            font-size: 18px;
            margin-bottom: 15px;
            background: linear-gradient(135deg, var(--text-color), rgba(45, 55, 72, 0.9));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            position: relative;
            z-index: 1;
        }

        .dark-mode .widget-title {
            background: linear-gradient(135deg, rgba(237, 242, 247, 0.95), rgba(226, 232, 240, 0.85));
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        /* Widget icon with modern glassy effect */
        .widget-icon {
            width: 45px;
            height: 45px;
            border-radius: 12px;
            background: rgba(255, 255, 255, 0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 15px;
            font-size: 20px;
            color: var(--primary-color);
            position: relative;
            overflow: hidden;
            box-shadow: 
                0 8px 15px rgba(0, 0, 0, 0.1),
                inset 0 -2px 0 rgba(0, 0, 0, 0.05);
        }

        .widget-icon::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 50%;
            background: linear-gradient(to bottom, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0));
            border-radius: 12px 12px 24px 24px;
        }

        .dark-mode .widget-icon {
            background: rgba(40, 50, 70, 0.9);
            box-shadow: 
                0 8px 15px rgba(0, 0, 0, 0.2),
                inset 0 -2px 0 rgba(0, 0, 0, 0.1);
        }

        .dark-mode .widget-icon::before {
            background: linear-gradient(to bottom, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0));
        }

        /* Widget header */
        .widget-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            cursor: move;
        }

        .widget-title {
            font-weight: 600;
            font-size: 1.2rem;
            transition: transform 0.3s ease;
            position: relative;
            z-index: 2;
        }

        .widget:hover .widget-title {
            transform: translateY(-3px);
        }

        .widget-actions {
            display: flex;
            gap: 8px;
            z-index: 5;
        }

        .widget-action-btn {
            background: none;
            border: none;
            font-size: 0.9rem;
            cursor: pointer;
            color: #555;
            width: 28px;
            height: 28px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
            position: relative;
            z-index: 10;
        }

        .widget-action-btn:hover {
            background-color: rgba(0, 0, 0, 0.05);
            color: var(--primary-color);
            transform: scale(1.1);
        }

        /* Widget content */
        .widget-content {
            flex: 1;
            position: relative;
            overflow: hidden;
            z-index: 2;
            font-size: 1rem;
            line-height: 1.6;
            transition: opacity 0.3s ease;
            opacity: 0.9;
        }

        .widget:hover .widget-content {
            opacity: 1;
        }

        /* AI Element Styling */
        .ai-icon {
            font-size: 28px;
            margin-bottom: 15px;
            transition: all 0.3s ease;
            position: relative;
            z-index: 2;
        }

        .ai-icon i {
            transition: transform 0.5s ease;
        }

        .widget:hover .ai-icon i {
            transform: scale(1.1) rotate(5deg);
        }

        .ai-pattern {
            position: absolute;
            bottom: -20px;
            right: -20px;
            width: 150px;
            height: 150px;
            opacity: 0.15;
            z-index: 1;
            background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M50 25L75 50L50 75L25 50L50 25Z' fill='%234361EE'/%3E%3C/svg%3E");
            background-size: 80px 80px;
            transition: transform 0.5s ease;
        }

        .widget:hover .ai-pattern {
            transform: rotate(10deg) scale(1.2);
        }

        .ai-badge {
            display: inline-flex;
            align-items: center;
            background-color: rgba(255, 255, 255, 0.15);
            padding: 6px 12px;
            border-radius: 30px;
            font-size: 0.8rem;
            font-weight: 600;
            margin-top: 20px;
            color: var(--light-text);
            backdrop-filter: blur(4px);
            -webkit-backdrop-filter: blur(4px);
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            z-index: 2;
        }

        .widget:hover .ai-badge {
            background-color: rgba(255, 255, 255, 0.2);
            transform: translateY(-3px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
        }

        .ai-badge::before {
            content: "";
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: var(--primary-color);
            margin-right: 8px;
            animation: pulse 2s infinite;
        }

        /* Japanese-inspired styling elements */
        .kanji-watermark {
            position: absolute;
            font-family: "Noto Serif JP", serif;
            font-size: 140px;
            opacity: 0.04;
            bottom: -30px;
            right: 10px;
            z-index: 1;
            transition: all 0.8s ease;
            pointer-events: none;
        }

        .widget:hover .kanji-watermark {
            opacity: 0.07;
            transform: translateY(-5px) rotate(3deg);
        }

        /* Wave pattern */
        .wave-pattern {
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 50px;
            background-image: url("data:image/svg+xml,%3Csvg width='100' height='25' viewBox='0 0 100 25' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 10 C 30 25, 70 0, 100 10 L 100 0 L 0 0 Z' fill='rgba(255,255,255,0.1)'/%3E%3C/svg%3E");
            background-size: 100px 25px;
            background-repeat: repeat-x;
            transition: transform 0.5s ease;
            pointer-events: none;
        }

        .widget:hover .wave-pattern {
            transform: translateX(10px);
        }

        /* Resize handle */
        .resize-handle {
            position: absolute;
            width: 16px;
            height: 16px;
            background: var(--primary-color);
            border-radius: 50%;
            bottom: 4px;
            right: 4px;
            cursor: nwse-resize;
            z-index: 10;
            opacity: 0;
            transition: opacity 0.2s, transform 0.2s;
        }

        .widget:hover .resize-handle {
            opacity: 1;
        }

        .widget:hover .resize-handle:hover {
            transform: scale(1.2);
            box-shadow: 0 0 10px rgba(67, 97, 238, 0.5);
        }

        /* Widget themes */
        .widget-theme-primary {
            background: linear-gradient(135deg, rgba(67, 97, 238, 0.85) 0%, rgba(58, 12, 163, 0.85) 100%);
            color: white;
        }

        .widget-theme-primary .widget-action-btn {
            color: rgba(255, 255, 255, 0.7);
        }

        .widget-theme-primary .widget-action-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
        }

        .widget-theme-accent {
            background: linear-gradient(135deg, rgba(247, 37, 133, 0.85) 0%, rgba(181, 23, 158, 0.85) 100%);
            color: white;
        }

        .widget-theme-accent .widget-action-btn {
            color: rgba(255, 255, 255, 0.7);
        }

        .widget-theme-accent .widget-action-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
        }

        /* Ghost element for drag preview */
        .ghost-widget {
            background: rgba(67, 97, 238, 0.2);
            border: 2px dashed var(--primary-color);
            border-radius: var(--border-radius);
            position: absolute;
            z-index: 5;
            pointer-events: none;
        }

        /* Placeholder for widget resizing */
        .resize-placeholder {
            background: rgba(67, 97, 238, 0.15);
            border: 2px dashed var(--primary-color);
            border-radius: var(--border-radius);
            position: absolute;
            z-index: 5;
            pointer-events: none;
        }

        /* Modal for adding widgets */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(5px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s, visibility 0.3s;
        }

        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            border-radius: 16px;
            width: 95%;
            max-width: 500px;
            padding: 24px;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .modal-header h2 {
            font-size: 1.5rem;
            font-weight: 600;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #888;
            transition: color 0.2s;
        }

        .modal-close:hover {
            color: var(--dark-color);
            transform: rotate(90deg);
        }

        .modal-body {
            margin-bottom: 24px;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--text-color);
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 12px;
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            font-size: 1rem;
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
            transition: border-color 0.2s, box-shadow 0.2s;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
        }

        .form-row {
            display: flex;
            gap: 16px;
        }

        .form-row .form-group {
            flex: 1;
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
        }

        /* Animations */
        @keyframes pulse {
            0% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.7; transform: scale(1.2); }
            100% { opacity: 1; transform: scale(1); }
        }

        .floating {
            animation: floating 6s ease-in-out infinite;
        }

        @keyframes floating {
            0% { transform: translateY(0px) rotate(0deg); }
            25% { transform: translateY(-8px) rotate(3deg); }
            50% { transform: translateY(0px) rotate(0deg); }
            75% { transform: translateY(8px) rotate(-3deg); }
            100% { transform: translateY(0px) rotate(0deg); }
        }

        /* Entry animations */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .widget {
            opacity: 0;
            animation: fadeInUp 0.8s forwards;
        }

        /* Particles */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        .particle {
            position: absolute;
            border-radius: 50%;
            opacity: 0.5;
            animation: particleFloat 15s infinite linear;
        }

        @keyframes particleFloat {
            0% { transform: translateY(0) rotate(0deg); }
            100% { transform: translateY(-100vh) rotate(360deg); }
        }

        /* Glow effect */
        .glow-effect {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: var(--border-radius);
            top: 0;
            left: 0;
            background: radial-gradient(circle at 50% 50%, rgba(255, 255, 255, 0.1), transparent 60%);
            opacity: 0;
            transition: opacity 0.5s ease;
            z-index: 1;
            pointer-events: none;
        }

        .widget:hover .glow-effect {
            opacity: 1;
        }

        /* Command palette styles */
        .command-palette {
            position: fixed;
            top: 30%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.95);
            width: 600px;
            max-width: 90vw;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15), 0 0 0 1px rgba(0, 0, 0, 0.05);
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.2s ease;
            overflow: hidden;
        }

        .command-palette.active {
            opacity: 1;
            visibility: visible;
            transform: translate(-50%, -50%) scale(1);
        }

        .command-input {
            width: 100%;
            padding: 16px 20px;
            border: none;
            outline: none;
            background: transparent;
            font-size: 16px;
            color: var(--text-color);
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }

        .dark-mode .command-palette {
            background: rgba(30, 41, 59, 0.9);
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3), 0 0 0 1px rgba(255, 255, 255, 0.05);
        }

        .dark-mode .command-input {
            color: var(--light-text);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .command-results {
            max-height: 400px;
            overflow-y: auto;
        }

        .command-item {
            padding: 12px 20px;
            display: flex;
            align-items: center;
            cursor: pointer;
            transition: background 0.2s;
        }

        .command-item:hover, .command-item.selected {
            background: rgba(0, 0, 0, 0.05);
        }

        .dark-mode .command-item:hover, .dark-mode .command-item.selected {
            background: rgba(255, 255, 255, 0.05);
        }

        .command-icon {
            width: 24px;
            height: 24px;
            margin-right: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary-color);
        }

        .command-text {
            flex: 1;
        }

        .command-title {
            font-size: 14px;
            font-weight: 500;
            margin-bottom: 2px;
        }

        .command-description {
            font-size: 12px;
            opacity: 0.7;
        }

        .command-shortcut {
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .key {
            background: rgba(0, 0, 0, 0.1);
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 11px;
            font-weight: 500;
            min-width: 20px;
            text-align: center;
        }

        .dark-mode .key {
            background: rgba(255, 255, 255, 0.1);
        }

        /* Command palette backdrop */
        .command-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(2px);
            z-index: 999;
            opacity: 0;
            visibility: hidden;
            transition: all 0.2s ease;
        }

        .command-backdrop.active {
            opacity: 1;
            visibility: visible;
        }

        /* Search button in header */
        .search-button {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 10px 16px;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 12px;
            border: 1px solid rgba(0, 0, 0, 0.1);
            cursor: pointer;
            transition: all 0.3s;
            color: var(--text-color);
            font-size: 14px;
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
        }

        .search-button:hover {
            background: rgba(255, 255, 255, 0.9);
            transform: translateY(-2px);
        }

        .search-shortcut {
            display: flex;
            align-items: center;
            opacity: 0.6;
            margin-left: 8px;
        }

        .dark-mode .search-button {
            background: rgba(30, 41, 59, 0.5);
            border: 1px solid rgba(255, 255, 255, 0.1);
            color: var(--light-text);
        }

        .dark-mode .search-button:hover {
            background: rgba(30, 41, 59, 0.7);
        }

        /* AI presence styling */
        .ai-presence {
            position: relative;
            padding: 15px;
            border-radius: 14px;
            background: linear-gradient(to right, rgba(64, 120, 255, 0.1), rgba(120, 80, 255, 0.15));
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            overflow: hidden;
            margin-top: 20px;
        }

        .ai-presence::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                radial-gradient(circle at 20% 50%, rgba(64, 120, 255, 0.15), transparent 25%),
                radial-gradient(circle at 80% 30%, rgba(120, 80, 255, 0.15), transparent 25%);
            opacity: 0.7;
            z-index: 0;
        }

        .dark-mode .ai-presence {
            background: linear-gradient(to right, rgba(64, 120, 255, 0.2), rgba(120, 80, 255, 0.25));
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .ai-presence-content {
            position: relative;
            z-index: 1;
        }

        .ai-bubble {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 12px 15px 12px 12px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
            margin-bottom: 10px;
            position: relative;
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
        }

        .ai-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: linear-gradient(135deg, #4378ff, #7850ff);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 14px;
            box-shadow: 0 4px 8px rgba(67, 120, 255, 0.3);
        }

        .ai-message {
            flex: 1;
            font-size: 14px;
            line-height: 1.5;
        }

        .dark-mode .ai-bubble {
            background: rgba(30, 41, 59, 0.8);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
        }

        .ai-actions {
            display: flex;
            gap: 8px;
            margin-top: 10px;
        }

        .ai-action-btn {
            background: rgba(255, 255, 255, 0.8);
            border: 1px solid rgba(0, 0, 0, 0.05);
            border-radius: 20px;
            padding: 6px 12px;
            font-size: 13px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }

        .ai-action-btn:hover {
            background: rgba(255, 255, 255, 0.95);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);
        }

        .dark-mode .ai-action-btn {
            background: rgba(30, 41, 59, 0.6);
            border: 1px solid rgba(255, 255, 255, 0.05);
            color: var(--light-text);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .dark-mode .ai-action-btn:hover {
            background: rgba(30, 41, 59, 0.8);
        }

        .ai-input {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 15px;
        }

        .ai-input-field {
            flex: 1;
            padding: 12px 15px;
            border-radius: 18px;
            border: 1px solid rgba(0, 0, 0, 0.1);
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
            font-size: 14px;
            transition: all 0.3s;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
        }

        .ai-input-field:focus {
            outline: none;
            border-color: rgba(67, 120, 255, 0.5);
            box-shadow: 0 4px 12px rgba(67, 120, 255, 0.1);
        }

        .dark-mode .ai-input-field {
            background: rgba(30, 41, 59, 0.7);
            border: 1px solid rgba(255, 255, 255, 0.1);
            color: var(--light-text);
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        }

        .ai-input-btn {
            background: linear-gradient(135deg, #4378ff, #7850ff);
            color: white;
            border: none;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 4px 8px rgba(67, 120, 255, 0.3);
        }

        .ai-input-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 12px rgba(67, 120, 255, 0.4);
        }
        
        /* Interactive 3D Object */
        .interactive-3d-object {
            position: relative;
            width: 100%;
            height: 180px;
            perspective: 800px;
            margin: 20px 0;
            cursor: grab;
        }

        .interactive-3d-object:active {
            cursor: grabbing;
        }

        .cube-container {
            width: 100px;
            height: 100px;
            position: absolute;
            top: 50%;
            left: 50%;
            transform-style: preserve-3d;
            transform: translate(-50%, -50%) rotateX(-20deg) rotateY(-20deg);
            transition: transform 0.5s cubic-bezier(0.215, 0.61, 0.355, 1);
        }

        .cube-face {
            position: absolute;
            width: 100px;
            height: 100px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: white;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
            box-shadow: inset 0 0 20px rgba(255, 255, 255, 0.1);
            opacity: 0.9;
        }

        .cube-face:nth-child(1) { transform: translateZ(50px); background: rgba(255, 107, 107, 0.6); }
        .cube-face:nth-child(2) { transform: rotateY(180deg) translateZ(50px); background: rgba(67, 97, 238, 0.6); }
        .cube-face:nth-child(3) { transform: rotateY(90deg) translateZ(50px); background: rgba(156, 39, 176, 0.6); }
        .cube-face:nth-child(4) { transform: rotateY(-90deg) translateZ(50px); background: rgba(0, 150, 136, 0.6); }
        .cube-face:nth-child(5) { transform: rotateX(90deg) translateZ(50px); background: rgba(255, 193, 7, 0.6); }
        .cube-face:nth-child(6) { transform: rotateX(-90deg) translateZ(50px); background: rgba(33, 150, 243, 0.6); }

        /* Chart with 3D depth */
        .chart-3d-container {
            position: relative;
            width: 100%;
            height: 200px;
            margin: 20px 0;
            perspective: 1000px;
        }

        .chart-3d {
            position: relative;
            width: 100%;
            height: 100%;
            transform-style: preserve-3d;
            transform: rotateX(60deg) rotateZ(-20deg);
        }

        .chart-floor {
            position: absolute;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.1);
            transform: translateZ(-5px);
            border-radius: 5px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
            display: grid;
            grid-template-columns: repeat(12, 1fr);
            grid-template-rows: repeat(12, 1fr);
            gap: 1px;
        }

        .chart-floor-tile {
            background: rgba(255, 255, 255, 0.05);
        }

        .chart-bar {
            position: absolute;
            width: 20px;
            background: linear-gradient(to top, rgba(67, 97, 238, 0.7), rgba(255, 107, 107, 0.7));
            bottom: 0;
            border-radius: 3px 3px 0 0;
            box-shadow: 0 0 20px rgba(67, 97, 238, 0.3);
            transform-style: preserve-3d;
            transform-origin: bottom center;
            transition: height 1s cubic-bezier(0.165, 0.84, 0.44, 1);
        }

        .chart-label {
            position: absolute;
            bottom: -25px;
            font-size: 10px;
            color: var(--text-color);
            text-align: center;
            width: 40px;
            margin-left: -10px;
        }

        .dark-mode .chart-label {
            color: var(--light-text);
        }

        /* Calendar Widget Styles */
        .calendar-events {
            margin: 15px 0;
        }

        .calendar-event {
            display: flex;
            padding: 10px 12px;
            background: rgba(255, 255, 255, 0.5);
            border-radius: 8px;
            margin-bottom: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            transition: all 0.2s;
        }

        .calendar-event:hover {
            transform: translateX(3px);
            background: rgba(255, 255, 255, 0.7);
        }

        .dark-mode .calendar-event {
            background: rgba(30, 41, 59, 0.5);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .dark-mode .calendar-event:hover {
            background: rgba(30, 41, 59, 0.7);
        }

        .event-time {
            font-size: 13px;
            font-weight: 600;
            color: var(--primary-color);
            min-width: 75px;
        }

        .event-title {
            font-size: 14px;
            margin-left: 10px;
        }

        /* Notes Widget Styles */
        .notes-content {
            padding: 15px;
            background: rgba(255, 255, 255, 0.5);
            border-radius: 12px;
            font-size: 14px;
            line-height: 1.6;
            margin: 15px 0;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }

        .dark-mode .notes-content {
            background: rgba(30, 41, 59, 0.5);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .notes-content p {
            margin-bottom: 10px;
        }

        /* Tasks Widget Styles */
        .tasks-list {
            margin: 15px 0;
        }

        .task-item {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            background: rgba(255, 255, 255, 0.5);
            border-radius: 8px;
            margin-bottom: 8px;
            transition: all 0.2s;
            cursor: pointer;
        }

        .task-item:hover {
            background: rgba(255, 255, 255, 0.7);
            transform: translateX(3px);
        }

        .dark-mode .task-item {
            background: rgba(30, 41, 59, 0.5);
        }

        .dark-mode .task-item:hover {
            background: rgba(30, 41, 59, 0.7);
        }

        .task-checkbox {
            width: 20px;
            height: 20px;
            border: 2px solid rgba(0, 0, 0, 0.2);
            border-radius: 4px;
            margin-right: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            color: white;
            transition: all 0.2s;
        }

        .dark-mode .task-checkbox {
            border-color: rgba(255, 255, 255, 0.2);
        }

        .task-item.completed .task-checkbox {
            background: var(--secondary-color);
            border-color: var(--secondary-color);
        }

        .task-item.completed .task-content {
            text-decoration: line-through;
            opacity: 0.7;
        }

        .task-add {
            display: flex;
            margin-top: 15px;
        }

        .task-input {
            flex: 1;
            padding: 10px 15px;
            border-radius: 8px;
            border: 1px solid rgba(0, 0, 0, 0.1);
            background: rgba(255, 255, 255, 0.7);
            font-size: 14px;
        }

        .task-input:focus {
            outline: none;
            border-color: var(--secondary-color);
            box-shadow: 0 0 0 2px rgba(67, 97, 238, 0.1);
        }

        .dark-mode .task-input {
            background: rgba(30, 41, 59, 0.7);
            border-color: rgba(255, 255, 255, 0.1);
            color: var(--light-text);
        }

        .task-add-btn {
            width: 36px;
            height: 36px;
            border-radius: 8px;
            border: none;
            background: var(--secondary-color);
            color: white;
            margin-left: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
        }

        .task-add-btn:hover {
            background: #3050db;
            transform: translateY(-2px);
        }

        /* Weather Widget Styles */
        .weather-info {
            text-align: center;
            margin: 15px 0;
        }

        .weather-temp {
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .weather-desc {
            font-size: 16px;
            margin-bottom: 5px;
        }

        .weather-location {
            font-size: 14px;
            opacity: 0.7;
        }

        .weather-forecast {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
            text-align: center;
        }

        .forecast-day {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 8px;
            font-size: 14px;
        }

        /* Progress Widget Styles */
        .progress-stats {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
        }

        .progress-stat {
            text-align: center;
        }

        .stat-label {
            font-size: 12px;
            opacity: 0.7;
            margin-bottom: 5px;
        }

        .stat-value {
            font-size: 18px;
            font-weight: 600;
        }

        /* Notion-like hover effect for text selection */
        ::selection {
            background: rgba(67, 97, 238, 0.2);
        }

        /* Notion-like focus mode - subtle highlight for active widget */
        .widget:focus-within {
            box-shadow: 
                0 15px 35px rgba(0, 0, 0, 0.1), 
                0 0 0 2px var(--secondary-color);
            outline: none;
        }

        /* Notion-like tooltip */
        [data-tooltip] {
            position: relative;
        }

        [data-tooltip]:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 12px;
            white-space: nowrap;
            z-index: 10;
            margin-bottom: 5px;
        }

        /* Notion-like mentions */
        .mention {
            background: rgba(67, 97, 238, 0.1);
            color: var(--secondary-color);
            padding: 2px 4px;
            border-radius: 4px;
            font-weight: 500;
        }

        .dark-mode .mention {
            background: rgba(67, 97, 238, 0.2);
        }
    </style>
</head>
<body>
    <!-- Command palette backdrop -->
    <div class="command-backdrop" id="command-backdrop"></div>
    
    <!-- Command palette (Notion style) -->
    <div class="command-palette" id="command-palette">
        <input type="text" class="command-input" id="command-input" placeholder="Type a command or search..." autofocus>
        <div class="command-results">
            <div class="command-item">
                <div class="command-icon"><i class="fas fa-plus"></i></div>
                <div class="command-text">
                    <div class="command-title">Create New Widget</div>
                    <div class="command-description">Add a new widget to your dashboard</div>
                </div>
            </div>
            <div class="command-item">
                <div class="command-icon"><i class="fas fa-palette"></i></div>
                <div class="command-text">
                    <div class="command-title">Change Theme</div>
                    <div class="command-description">Switch between light and dark mode</div>
                </div>
                <div class="command-shortcut">
                    <span class="key">⌘</span>
                    <span class="key">D</span>
                </div>
            </div>
            <div class="command-item">
                <div class="command-icon"><i class="fas fa-columns"></i></div>
                <div class="command-text">
                    <div class="command-title">Rearrange Layout</div>
                    <div class="command-description">Change the dashboard layout</div>
                </div>
            </div>
            <div class="command-item">
                <div class="command-icon"><i class="fas fa-share-alt"></i></div>
                <div class="command-text">
                    <div class="command-title">Share Dashboard</div>
                    <div class="command-description">Share your dashboard with others</div>
                </div>
                <div class="command-shortcut">
                    <span class="key">⌘</span>
                    <span class="key">S</span>
                </div>
            </div>
            <div class="command-item">
                <div class="command-icon"><i class="fas fa-cog"></i></div>
                <div class="command-text">
                    <div class="command-title">Settings</div>
                    <div class="command-description">Configure dashboard settings</div>
                </div>
            </div>
        </div>
    </div>

    <button class="dark-mode-toggle" id="darkModeToggle">
        <i class="fas fa-moon"></i>
    </button>

    <div class="particles" id="particles"></div>

    <div class="app-container">
        <header>
            <div class="header-title">
                <h1>AI Bento Dashboard</h1>
                <p>An interactive Japanese-inspired dashboard with drag & drop widgets</p>
            </div>
            <div class="header-controls">
                <!-- Add search button with command+K shortcut -->
                <div class="search-button" id="search-button">
                    <i class="fas fa-search"></i>
                    <span>Search</span>
                    <div class="search-shortcut">
                        <span class="key">⌘</span>
                        <span class="key">K</span>
                    </div>
                </div>
                <button class="btn btn-primary" id="add-widget-btn"><i class="fas fa-plus"></i> Add Widget</button>
            </div>
        </header>

        <div class="bento-container">
            <!-- Interactive 3D Widget -->
            <div class="widget medium interactive-3d metal" style="grid-column: span 4; grid-row: span 3;">
                <div class="widget-content">
                    <div class="widget-title-with-emoji">
                        <span class="widget-emoji">✨</span>
                        <h3>3D Interactions</h3>
                    </div>
                    <p>Rotate this 3D cube using your mouse.</p>
                    
                    <div class="interactive-3d-object">
                        <div class="cube-container">
                            <div class="cube-face">1</div>
                            <div class="cube-face">2</div>
                            <div class="cube-face">3</div>
                            <div class="cube-face">4</div>
                            <div class="cube-face">5</div>
                            <div class="cube-face">6</div>
                        </div>
                    </div>
                    
                    <div class="widget-meta">
                        <span class="widget-tag"><i class="fas fa-cube"></i> Interactive</span>
                        <span>Updated 2m ago</span>
                    </div>
                </div>
            </div>
            
            <!-- AI Assistant Widget with Presence -->
            <div class="widget large glass" style="grid-column: span 5; grid-row: span 4;">
                <div class="widget-content">
                    <div class="widget-title-with-emoji">
                        <span class="widget-emoji">🤖</span>
                        <h3>AI Assistant</h3>
                    </div>
                    
                    <div class="ai-presence">
                        <div class="ai-presence-content">
                            <div class="ai-bubble">
                                <div class="ai-avatar">AI</div>
                                <div class="ai-message">Hi there! I'm your dashboard assistant. How can I help you today?</div>
                            </div>
                            
                            <div class="ai-actions">
                                <button class="ai-action-btn">Summarize my day</button>
                                <button class="ai-action-btn">Generate report</button>
                                <button class="ai-action-btn">Set reminder</button>
                            </div>
                            
                            <div class="ai-input">
                                <input type="text" class="ai-input-field" placeholder="Ask me anything...">
                                <button class="ai-input-btn"><i class="fas fa-paper-plane"></i></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Modern Skeuomorphic Calendar Widget -->
            <div class="widget small" style="grid-column: span 3; grid-row: span 3;">
                <div class="widget-content">
                    <div class="widget-title-with-emoji">
                        <span class="widget-emoji">📅</span>
                        <h3>Calendar</h3>
                    </div>
                    
                    <div class="widget-tag"><i class="fas fa-calendar-check"></i> Today's Schedule</div>
                    
                    <div class="calendar-events">
                        <div class="calendar-event">
                            <div class="event-time">09:00 AM</div>
                            <div class="event-title">Team Standup</div>
                        </div>
                        <div class="calendar-event">
                            <div class="event-time">11:30 AM</div>
                            <div class="event-title">Client Meeting</div>
                        </div>
                        <div class="calendar-event">
                            <div class="event-time">02:00 PM</div>
                            <div class="event-title">Design Review</div>
                        </div>
                    </div>
                    
                    <button class="widget-button">
                        <i class="fas fa-plus"></i> Add Event
                    </button>
                </div>
            </div>
            
            <!-- Analytics Widget with 3D Chart -->
            <div class="widget wide" style="grid-column: span 8; grid-row: span 3;">
                <div class="widget-content">
                    <div class="widget-title-with-emoji">
                        <span class="widget-emoji">📊</span>
                        <h3>Analytics Overview</h3>
                    </div>
                    
                    <p>Monthly performance metrics</p>
                    
                    <div class="chart-3d-container">
                        <div class="chart-3d">
                            <!-- Chart will be generated via JavaScript -->
                        </div>
                    </div>
                    
                    <div class="widget-meta">
                        <span class="widget-tag"><i class="fas fa-chart-line"></i> Growth</span>
                        <span>Last updated: Today</span>
                    </div>
                </div>
            </div>
            
            <!-- Text & Emoji Mix - Notes Widget -->
            <div class="widget small glass" style="grid-column: span 3; grid-row: span 3;">
                <div class="widget-content">
                    <div class="widget-title-with-emoji">
                        <span class="widget-emoji">📝</span>
                        <h3>Quick Notes</h3>
                    </div>
                    
                    <div class="notes-content">
                        <p>Remember to finish the <span class="highlight-text">design proposal</span> 🎨 for tomorrow's meeting!</p>
                        <p>Call ☎️ Sarah about the project timeline</p>
                        <p>Review 👀 feedback from last week's presentation</p>
                    </div>
                    
                    <button class="widget-button">
                        <i class="fas fa-edit"></i> New Note
                    </button>
                </div>
            </div>
            
            <!-- Progress Widget -->
            <div class="widget small metal" style="grid-column: span 3; grid-row: span 2;">
                <div class="widget-content">
                    <div class="widget-title-with-emoji">
                        <span class="widget-emoji">🚀</span>
                        <h3>Project Progress</h3>
                    </div>
                    
                    <div class="widget-progress-container">
                        <div class="widget-progress-bar" style="--progress: 65%"></div>
                    </div>
                    
                    <div class="progress-stats">
                        <div class="progress-stat">
                            <div class="stat-label">Completed</div>
                            <div class="stat-value">65%</div>
                        </div>
                        <div class="progress-stat">
                            <div class="stat-label">Remaining</div>
                            <div class="stat-value">5 days</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Weather Widget with Skeuomorphic Design -->
            <div class="widget small glass" style="grid-column: span 3; grid-row: span 2;">
                <div class="widget-content">
                    <div class="widget-title-with-emoji">
                        <span class="widget-emoji">🌤️</span>
                        <h3>Weather</h3>
                    </div>
                    
                    <div class="weather-info">
                        <div class="weather-temp">72°</div>
                        <div class="weather-desc">Partly Cloudy</div>
                        <div class="weather-location">San Francisco, CA</div>
                    </div>
                    
                    <div class="weather-forecast">
                        <div class="forecast-day">
                            <div>Mon</div>
                            <div><i class="fas fa-sun"></i></div>
                            <div>75°</div>
                        </div>
                        <div class="forecast-day">
                            <div>Tue</div>
                            <div><i class="fas fa-cloud-sun"></i></div>
                            <div>72°</div>
                        </div>
                        <div class="forecast-day">
                            <div>Wed</div>
                            <div><i class="fas fa-cloud"></i></div>
                            <div>68°</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Tasks Widget with Notion-like features -->
            <div class="widget medium" style="grid-column: span 4; grid-row: span 3;">
                <div class="widget-content">
                    <div class="widget-title-with-emoji">
                        <span class="widget-emoji">✅</span>
                        <h3>Tasks</h3>
                    </div>
                    
                    <div class="tasks-list">
                        <div class="task-item completed">
                            <div class="task-checkbox"><i class="fas fa-check"></i></div>
                            <div class="task-content">Initial design wireframes</div>
                        </div>
                        <div class="task-item">
                            <div class="task-checkbox"></div>
                            <div class="task-content">Review client feedback</div>
                        </div>
                        <div class="task-item">
                            <div class="task-checkbox"></div>
                            <div class="task-content">Prepare presentation slides</div>
                        </div>
                        <div class="task-item">
                            <div class="task-checkbox"></div>
                            <div class="task-content">Update project timeline</div>
                        </div>
                        <div class="task-item">
                            <div class="task-checkbox"></div>
                            <div class="task-content">Schedule follow-up meeting</div>
                        </div>
                    </div>
                    
                    <div class="task-add">
                        <input type="text" placeholder="Add a new task..." class="task-input">
                        <button class="task-add-btn"><i class="fas fa-plus"></i></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modal for adding widgets -->
    <div class="modal-overlay" id="addWidgetModal">
        <div class="modal-content glass">
            <div class="modal-header">
                <h2>Add New Widget</h2>
                <button class="modal-close" id="closeModalBtn">&times;</button>
            </div>
            <div class="modal-body">
                <form id="addWidgetForm">
                    <div class="form-group">
                        <label for="widgetTitle">Widget Title</label>
                    ${badgeElement}
                    ${kanjiElement}
                    ${patternElement}
                    ${waveElement}
                    <div class="glow-effect"></div>
                    <div class="resize-handle"></div>
                `;
                
                bentoGrid.appendChild(widgetElement);
                
                // Setup drag functionality
                setupWidgetDrag(widgetElement);
                
                // Setup resize functionality
                setupWidgetResize(widgetElement);
                
                // Setup remove button
                const removeBtn = widgetElement.querySelector('.widget-remove-btn');
                removeBtn.addEventListener('click', () => removeWidget(widget.id));
                
                // Setup 3D tilt effect
                setupTiltEffect(widgetElement);
                
                // Add click animation to the entire widget
                widgetElement.addEventListener('click', function(e) {
                    if (!e.target.closest('.widget-action-btn') && 
                        !e.target.closest('.resize-handle') && 
                        !activeDragWidget && 
                        !activeResizeWidget) {
                        addClickEffect(this);
                    }
                });
            }
            
            // Setup 3D tilt effect
            function setupTiltEffect(element) {
                element.addEventListener('mousemove', (e) => {
                    if (activeDragWidget || activeResizeWidget) return;
                    
                    const rect = element.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                    const y = e.clientY - rect.top;
                    
                    const xPercent = x / rect.width - 0.5;
                    const yPercent = y / rect.height - 0.5;
                    
                    const tiltAmount = 3; // Max degrees of tilt
                    const rotateX = tiltAmount * yPercent * -1;
                    const rotateY = tiltAmount * xPercent;
                    
                    element.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(0)`;
                });
                
                element.addEventListener('mouseleave', () => {
                    element.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg) translateZ(0)';
                });
            }
            
            // Add click animation
            function addClickEffect(element) {
                element.classList.add('click-effect');
                element.style.transform = 'scale(0.98)';
                
                setTimeout(() => {
                    element.style.transform = 'scale(1)';
                    setTimeout(() => {
                        element.classList.remove('click-effect');
                    }, 200);
                }, 200);
            }
            
            // Setup widget drag functionality
            function setupWidgetDrag(element) {
                const header = element.querySelector('.widget-header');
                
                header.addEventListener('mousedown', startDrag);
                
                function startDrag(e) {
                    e.preventDefault();
                    
                    if (activeResizeWidget) return;
                    
                    const rect = element.getBoundingClientRect();
                    
                    activeDragWidget = element;
                    element.classList.add('dragging');
                    
                    // Save starting positions
                    startMouseX = e.clientX;
                    startMouseY = e.clientY;
                    startWidgetX = rect.left;
                    startWidgetY = rect.top;
                    
                    // Create ghost element
                    createGhostElement(element);
                    
                    // Add global mouse events
                    document.addEventListener('mousemove', handleDrag);
                    document.addEventListener('mouseup', stopDrag);
                }
                
                function handleDrag(e) {
                    if (!activeDragWidget) return;
                    
                    // Calculate the new position
                    const deltaX = e.clientX - startMouseX;
                    const deltaY = e.clientY - startMouseY;
                    
                    // Update position of the dragged element
                    activeDragWidget.style.position = 'absolute';
                    activeDragWidget.style.left = `${startWidgetX + deltaX}px`;
                    activeDragWidget.style.top = `${startWidgetY + deltaY}px`;
                    activeDragWidget.style.width = `${startWidgetWidth}px`;
                    activeDragWidget.style.height = `${startWidgetHeight}px`;
                    activeDragWidget.style.zIndex = '100';
                    
                    // Calculate grid position for ghost element
                    const gridRect = bentoGrid.getBoundingClientRect();
                    const relativeX = e.clientX - gridRect.left;
                    const relativeY = e.clientY - gridRect.top;
                    
                    // Calculate grid column and row
                    const col = Math.floor(relativeX / gridColumnWidth) + 1;
                    const row = Math.floor(relativeY / gridRowHeight) + 1;
                    
                    // Update ghost element position to snap to grid
                    if (ghostElement && col > 0 && row > 0) {
                        const widgetColSpan = parseInt(activeDragWidget.classList.toString().match(/widget-cols-(\d+)/)[1]);
                        const widgetRowSpan = parseInt(activeDragWidget.classList.toString().match(/widget-rows-(\d+)/)[1]);
                        
                        // Calculate grid position in pixels
                        const gridX = (col - 1) * gridColumnWidth;
                        const gridY = (row - 1) * gridRowHeight;
                        
                        ghostElement.style.left = `${gridX}px`;
                        ghostElement.style.top = `${gridY}px`;
                        ghostElement.style.width = `${widgetColSpan * gridColumnWidth - 20}px`;
                        ghostElement.style.height = `${widgetRowSpan * gridRowHeight - 20}px`;
                    }
                }
                
                function stopDrag() {
                    if (!activeDragWidget) return;
                    
                    // Clean up the ghost element
                    if (ghostElement) {
                        const ghostRect = ghostElement.getBoundingClientRect();
                        const gridRect = bentoGrid.getBoundingClientRect();
                        
                        // Calculate final grid position
                        const col = Math.floor((ghostRect.left - gridRect.left) / gridColumnWidth) + 1;
                        const row = Math.floor((ghostRect.top - gridRect.top) / gridRowHeight) + 1;
                        
                        // Reset the widget's style
                        activeDragWidget.style.position = '';
                        activeDragWidget.style.left = '';
                        activeDragWidget.style.top = '';
                        activeDragWidget.style.width = '';
                        activeDragWidget.style.height = '';
                        activeDragWidget.style.zIndex = '';
                        
                        // Move the widget to the new position in the DOM
                        if (col > 0 && row > 0) {
                            // Update the order in the grid
                            bentoGrid.appendChild(activeDragWidget);
                            
                            // Update the widget data
                            const widgetId = parseInt(activeDragWidget.dataset.id);
                            const widgetIndex = widgets.findIndex(w => w.id === widgetId);
                            if (widgetIndex >= 0) {
                                widgets[widgetIndex].gridCol = col;
                                widgets[widgetIndex].gridRow = row;
                            }
                        }
                        
                        bentoGrid.removeChild(ghostElement);
                        ghostElement = null;
                    }
                    
                    activeDragWidget.classList.remove('dragging');
                    activeDragWidget = null;
                    
                    // Remove global mouse events
                    document.removeEventListener('mousemove', handleDrag);
                    document.removeEventListener('mouseup', stopDrag);
                }
            }
            
            // Setup widget resize functionality
            function setupWidgetResize(element) {
                const resizeHandle = element.querySelector('.resize-handle');
                
                resizeHandle.addEventListener('mousedown', startResize);
                
                function startResize(e) {
                    e.preventDefault();
                    
                    if (activeDragWidget) return;
                    
                    const rect = element.getBoundingClientRect();
                    
                    activeResizeWidget = element;
                    element.classList.add('resizing');
                    
                    // Save starting positions and dimensions
                    startMouseX = e.clientX;
                    startMouseY = e.clientY;
                    startWidgetWidth = rect.width;
                    startWidgetHeight = rect.height;
                    
                    // Create resize placeholder
                    createResizePlaceholder(element);
                    
                    // Add global mouse events
                    document.addEventListener('mousemove', handleResize);
                    document.addEventListener('mouseup', stopResize);
                }
                
                function handleResize(e) {
                    if (!activeResizeWidget) return;
                    
                    // Calculate the new dimensions
                    const deltaX = e.clientX - startMouseX;
                    const deltaY = e.clientY - startMouseY;
                    
                    const newWidth = Math.max(200, startWidgetWidth + deltaX);
                    const newHeight = Math.max(200, startWidgetHeight + deltaY);
                    
                    // Calculate column and row span based on new dimensions
                    const newColSpan = Math.max(1, Math.min(6, Math.round(newWidth / gridColumnWidth)));
                    const newRowSpan = Math.max(1, Math.min(3, Math.round(newHeight / gridRowHeight)));
                    
                    // Update resize placeholder
                    if (resizePlaceholder) {
                        resizePlaceholder.style.width = `${newColSpan * gridColumnWidth - 20}px`;
                        resizePlaceholder.style.height = `${newRowSpan * gridRowHeight - 20}px`;
                        
                        // Store the new dimensions on the placeholder
                        resizePlaceholder.dataset.newColSpan = newColSpan;
                        resizePlaceholder.dataset.newRowSpan = newRowSpan;
                    }
                }
                
                function stopResize() {
                    if (!activeResizeWidget) return;
                    
                    // Apply the new dimensions from the placeholder
                    if (resizePlaceholder) {
                        const newColSpan = parseInt(resizePlaceholder.dataset.newColSpan);
                        const newRowSpan = parseInt(resizePlaceholder.dataset.newRowSpan);
                        
                        // Remove existing column and row classes
                        activeResizeWidget.classList.forEach(className => {
                            if (className.match(/widget-cols-\d+/)) {
                                activeResizeWidget.classList.remove(className);
                            }
                            if (className.match(/widget-rows-\d+/)) {
                                activeResizeWidget.classList.remove(className);
                            }
                        });
                        
                        // Add new column and row classes
                        activeResizeWidget.classList.add(`widget-cols-${newColSpan}`);
                        activeResizeWidget.classList.add(`widget-rows-${newRowSpan}`);
                        
                        // Update the widget data
                        const widgetId = parseInt(activeResizeWidget.dataset.id);
                        const widgetIndex = widgets.findIndex(w => w.id === widgetId);
                        if (widgetIndex >= 0) {
                            widgets[widgetIndex].cols = newColSpan;
                            widgets[widgetIndex].rows = newRowSpan;
                        }
                        
                        bentoGrid.removeChild(resizePlaceholder);
                        resizePlaceholder = null;
                    }
                    
                    activeResizeWidget.classList.remove('resizing');
                    activeResizeWidget = null;
                    
                    // Remove global mouse events
                    document.removeEventListener('mousemove', handleResize);
                    document.removeEventListener('mouseup', stopResize);
                }
            }
            
            // Create a ghost element to show where the widget will be placed
            function createGhostElement(element) {
                const rect = element.getBoundingClientRect();
                
                ghostElement = document.createElement('div');
                ghostElement.className = 'ghost-widget';
                
                // Set the ghost element dimensions based on the original element
                startWidgetWidth = rect.width;
                startWidgetHeight = rect.height;
                
                ghostElement.style.width = `${startWidgetWidth - 20}px`;
                ghostElement.style.height = `${startWidgetHeight - 20}px`;
                
                // Position the ghost element initially
                ghostElement.style.left = `${rect.left - bentoGrid.getBoundingClientRect().left}px`;
                ghostElement.style.top = `${rect.top - bentoGrid.getBoundingClientRect().top}px`;
                
                bentoGrid.appendChild(ghostElement);
            }
            
            // Create a placeholder for resizing
            function createResizePlaceholder(element) {
                const rect = element.getBoundingClientRect();
                const gridRect = bentoGrid.getBoundingClientRect();
                
                resizePlaceholder = document.createElement('div');
                resizePlaceholder.className = 'resize-placeholder';
                
                // Set the placeholder dimensions and position
                resizePlaceholder.style.width = `${rect.width - 20}px`;
                resizePlaceholder.style.height = `${rect.height - 20}px`;
                resizePlaceholder.style.left = `${rect.left - gridRect.left}px`;
                resizePlaceholder.style.top = `${rect.top - gridRect.top}px`;
                
                bentoGrid.appendChild(resizePlaceholder);
            }
            
            // Calculate grid dimensions
            function calculateGridDimensions() {
                const gridRect = bentoGrid.getBoundingClientRect();
                const gridComputedStyle = window.getComputedStyle(bentoGrid);
                const gridGap = parseInt(gridComputedStyle.getPropertyValue('gap'));
                
                const gridTemplateColumnsValue = gridComputedStyle.getPropertyValue('grid-template-columns');
                const columnCount = gridTemplateColumnsValue.split(' ').length;
                
                gridColumnWidth = (gridRect.width - (gridGap * (columnCount - 1))) / columnCount;
                gridRowHeight = 200 + gridGap; // Approximate row height
            }
            
            // Modal Functions
            function openAddWidgetModal() {
                addWidgetModal.classList.add('active');
            }
            
            function closeAddWidgetModal() {
                addWidgetModal.classList.remove('active');
                addWidgetForm.reset();
            }
            
            function saveNewWidget() {
                const title = document.getElementById('widgetTitle').value;
                const cols = parseInt(document.getElementById('widgetColumns').value);
                const rows = parseInt(document.getElementById('widgetRows').value);
                const theme = document.getElementById('widgetTheme').value;
                const icon = document.getElementById('widgetIcon').value;
                const kanji = document.getElementById('widgetKanji').value;
                
                if (!title) {
                    alert('Please enter a widget title');
                    return;
                }
                
                const newWidget = {
                    id: nextWidgetId++,
                    title,
                    cols,
                    rows,
                    theme,
                    icon,
                    kanji,
                    content: 'New widget content'
                };
                
                widgets.push(newWidget);
                createWidgetElement(newWidget);
                
                closeAddWidgetModal();
            }
            
            // Remove a widget
            function removeWidget(id) {
                const widgetElement = document.querySelector(`.widget[data-id="${id}"]`);
                
                if (widgetElement) {
                    // Add removal animation
                    widgetElement.style.transform = 'scale(0.9)';
                    widgetElement.style.opacity = '0';
                    
                    setTimeout(() => {
                        bentoGrid.removeChild(widgetElement);
                        
                        // Remove from the widgets array
                        const widgetIndex = widgets.findIndex(w => w.id === id);
                        if (widgetIndex >= 0) {
                            widgets.splice(widgetIndex, 1);
                        }
                    }, 300);
                }
            }
            
            // Create particles
            function createParticles() {
                const particlesContainer = document.getElementById('particles');
                const particleCount = 30;
                
                for (let i = 0; i < particleCount; i++) {
                    const particle = document.createElement('div');
                    particle.className = 'particle';
                    
                    // Random properties
                    const size = Math.random() * 15 + 5;
                    const color = getRandomColor(0.2);
                    const startPositionX = Math.random() * 100;
                    const duration = Math.random() * 30 + 15;
                    const delay = Math.random() * 10;
                    
                    // Set styles
                    particle.style.width = `${size}px`;
                    particle.style.height = `${size}px`;
                    particle.style.background = color;
                    particle.style.left = `${startPositionX}%`;
                    particle.style.top = '100%';
                    particle.style.animationDuration = `${duration}s`;
                    particle.style.animationDelay = `${delay}s`;
                    
                    particlesContainer.appendChild(particle);
                }
            }
            
            // Get random color with transparency
            function getRandomColor(alpha) {
                const colors = [
                    `rgba(255, 107, 107, ${alpha})`,  // primary
                    `rgba(67, 97, 238, ${alpha})`,    // secondary
                    `rgba(156, 39, 176, ${alpha})`,   // accent
                    `rgba(58, 12, 163, ${alpha})`,    // dark purple
                    `rgba(247, 37, 133, ${alpha})`    // pink
                ];
                
                return colors[Math.floor(Math.random() * colors.length)];
            }

            // Add command palette functionality
            document.addEventListener('DOMContentLoaded', function() {
                const commandPalette = document.getElementById('command-palette');
                const commandBackdrop = document.getElementById('command-backdrop');
                const commandInput = document.getElementById('command-input');
                const searchButton = document.getElementById('search-button');
                
                // Function to open command palette
                function openCommandPalette() {
                    commandPalette.classList.add('active');
                    commandBackdrop.classList.add('active');
                    setTimeout(() => {
                        commandInput.focus();
                    }, 100);
                }
                
                // Function to close command palette
                function closeCommandPalette() {
                    commandPalette.classList.remove('active');
                    commandBackdrop.classList.remove('active');
                }
                
                // Open command palette with search button
                searchButton.addEventListener('click', openCommandPalette);
                
                // Open command palette with keyboard shortcut (Cmd+K or Ctrl+K)
                document.addEventListener('keydown', function(e) {
                    if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
                        e.preventDefault();
                        openCommandPalette();
                    }
                    
                    // Dark mode toggle with Cmd+D or Ctrl+D
                    if ((e.metaKey || e.ctrlKey) && e.key === 'd') {
                        e.preventDefault();
                        document.body.classList.toggle('dark-mode');
                        const isDarkMode = document.body.classList.contains('dark-mode');
                        const icon = document.querySelector('.dark-mode-toggle i');
                        icon.className = isDarkMode ? 'fas fa-sun' : 'fas fa-moon';
                    }
                    
                    // Escape key to close command palette
                    if (e.key === 'Escape' && commandPalette.classList.contains('active')) {
                        closeCommandPalette();
                    }
                    
                    // Slash key for quick search - Notion-like behavior
                    if (e.key === '/' && !commandPalette.classList.contains('active') && 
                        document.activeElement.tagName !== 'INPUT' && 
                        document.activeElement.tagName !== 'TEXTAREA') {
                        e.preventDefault();
                        openCommandPalette();
                    }
                });
                
                // Close when clicking on backdrop
                commandBackdrop.addEventListener('click', closeCommandPalette);
                
                // Command item keyboard navigation
                const commandItems = document.querySelectorAll('.command-item');
                let selectedIndex = -1;
                
                commandInput.addEventListener('keydown', function(e) {
                    if (e.key === 'ArrowDown') {
                        e.preventDefault();
                        selectedIndex = (selectedIndex + 1) % commandItems.length;
                        highlightSelected();
                    } else if (e.key === 'ArrowUp') {
                        e.preventDefault();
                        selectedIndex = (selectedIndex - 1 + commandItems.length) % commandItems.length;
                        highlightSelected();
                    } else if (e.key === 'Enter' && selectedIndex >= 0) {
                        e.preventDefault();
                        commandItems[selectedIndex].click();
                    }
                });
                
                function highlightSelected() {
                    commandItems.forEach(item => item.classList.remove('selected'));
                    if (selectedIndex >= 0) {
                        commandItems[selectedIndex].classList.add('selected');
                        commandItems[selectedIndex].scrollIntoView({ block: 'nearest' });
                    }
                }
                
                // Add click event for command items
                commandItems.forEach(item => {
                    item.addEventListener('click', function() {
                        const title = this.querySelector('.command-title').textContent;
                        
                        if (title === 'Change Theme') {
                            document.body.classList.toggle('dark-mode');
                            const isDarkMode = document.body.classList.contains('dark-mode');
                            const icon = document.querySelector('.dark-mode-toggle i');
                            icon.className = isDarkMode ? 'fas fa-sun' : 'fas fa-moon';
                        }
                        
                        // Add more command actions here
                        
                        closeCommandPalette();
                    });
                });
                
                // Initialize 3D cube interaction
                const cubeContainers = document.querySelectorAll('.cube-container');
                
                cubeContainers.forEach(cube => {
                    let isDragging = false;
                    let previousX = 0;
                    let previousY = 0;
                    let rotateX = -20;
                    let rotateY = -20;
                    
                    const container = cube.closest('.interactive-3d-object');
                    
                    container.addEventListener('mousedown', (e) => {
                        isDragging = true;
                        previousX = e.clientX;
                        previousY = e.clientY;
                        container.style.cursor = 'grabbing';
                    });
                    
                    document.addEventListener('mousemove', (e) => {
                        if (!isDragging) return;
                        
                        const deltaX = e.clientX - previousX;
                        const deltaY = e.clientY - previousY;
                        
                        rotateY += deltaX * 0.5;
                        rotateX -= deltaY * 0.5;
                        
                        cube.style.transform = `translate(-50%, -50%) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
                        
                        previousX = e.clientX;
                        previousY = e.clientY;
                    });
                    
                    document.addEventListener('mouseup', () => {
                        isDragging = false;
                        container.style.cursor = 'grab';
                    });
                    
                    document.addEventListener('mouseleave', () => {
                        isDragging = false;
                        container.style.cursor = 'grab';
                    });
                });
                
                // Initialize charts with 3D effect
                const chartContainers = document.querySelectorAll('.chart-3d-container');
                
                chartContainers.forEach(container => {
                    const chart = container.querySelector('.chart-3d');
                    const floor = document.createElement('div');
                    floor.className = 'chart-floor';
                    chart.appendChild(floor);
                    
                    // Create floor grid
                    for (let i = 0; i < 144; i++) {
                        const tile = document.createElement('div');
                        tile.className = 'chart-floor-tile';
                        floor.appendChild(tile);
                    }
                    
                    // Add 3D bars
                    const data = [30, 60, 45, 70, 85, 55, 40, 75, 50];
                    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep'];
                    
                    data.forEach((value, index) => {
                        const bar = document.createElement('div');
                        bar.className = 'chart-bar';
                        bar.style.height = '0px';
                        bar.style.left = `${index * 40 + 40}px`;
                        chart.appendChild(bar);
                        
                        const label = document.createElement('div');
                        label.className = 'chart-label';
                        label.textContent = months[index];
                        label.style.left = `${index * 40 + 40}px`;
                        chart.appendChild(label);
                        
                        // Animate bar height after a delay
                        setTimeout(() => {
                            bar.style.height = `${value}px`;
                        }, 300 + index * 100);
                    });
                });
                
                // Apply floating animation to appropriate widgets
                const widgets = document.querySelectorAll('.widget');
                widgets.forEach((widget, index) => {
                    widget.style.setProperty('--index', index);
                    
                    // Randomly assign floating animation to some widgets
                    if (Math.random() > 0.7) {
                        widget.classList.add('floating');
                    }
                });
                
                // Notion-like progressive blur effect on scroll
                const header = document.querySelector('header');
                window.addEventListener('scroll', function() {
                    const scrollY = window.scrollY;
                    if (scrollY > 10) {
                        header.style.backdropFilter = `blur(${Math.min(scrollY / 5, 20)}px)`;
                        header.style.webkitBackdropFilter = `blur(${Math.min(scrollY / 5, 20)}px)`;
                        header.style.background = `rgba(255, 255, 255, ${Math.min(scrollY / 200, 0.8)})`;
                        header.style.boxShadow = `0 4px 20px rgba(0, 0, 0, ${Math.min(scrollY / 500, 0.1)})`;
                    } else {
                        header.style.backdropFilter = 'blur(0px)';
                        header.style.webkitBackdropFilter = 'blur(0px)';
                        header.style.background = 'transparent';
                        header.style.boxShadow = 'none';
                    }
                });

                // AI message typing effect
                const aiMessages = document.querySelectorAll('.ai-message');
                aiMessages.forEach(message => {
                    const originalText = message.textContent;
                    message.textContent = '';
                    
                    let charIndex = 0;
                    const typingInterval = setInterval(() => {
                        if (charIndex < originalText.length) {
                            message.textContent += originalText.charAt(charIndex);
                            charIndex++;
                        } else {
                            clearInterval(typingInterval);
                        }
                    }, 30);
                });
                
                // Init dark mode based on user preference
                if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                    document.body.classList.add('dark-mode');
                    const icon = document.querySelector('.dark-mode-toggle i');
                    icon.className = 'fas fa-sun';
                }
                
                // Dark mode toggle click handler
                const darkModeToggle = document.getElementById('darkModeToggle');
                darkModeToggle.addEventListener('click', () => {
                    document.body.classList.toggle('dark-mode');
                    const isDarkMode = document.body.classList.contains('dark-mode');
                    const icon = document.querySelector('.dark-mode-toggle i');
                    icon.className = isDarkMode ? 'fas fa-sun' : 'fas fa-moon';
                });
            });
        });
    </script>
</body>
</html> 