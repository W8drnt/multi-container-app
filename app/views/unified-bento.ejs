<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bento UI Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Noto+Serif+JP:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>
    <style>
        /* Particle background */
        #particles-js {
            position: fixed;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: 0;
            pointer-events: none;
        }
        
        /* Global styles */
        :root {
            --primary-color: #4361EE;
            --secondary-color: #3A0CA3;
            --accent-color: #F72585;
            --text-color: #2D3748;
            --light-text: #F7FAFC;
            --bg-color: #EDF2F7;
            --shadow-color: rgba(0, 0, 0, 0.15);
            --blur-amount: 12px;
            --border-radius: 16px;
            --grid-gap: 20px;
            --transition-speed: 0.3s;
            --widget-bg: rgba(255, 255, 255, 0.85);
            --widget-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            padding: 20px;
            color: var(--text-color);
            transition: background-color 0.5s ease;
        }

        body.dark-mode {
            --bg-color: #1A202C;
            --text-color: #E2E8F0;
            --shadow-color: rgba(0, 0, 0, 0.25);
            --widget-bg: rgba(26, 32, 44, 0.85);
            background: linear-gradient(135deg, #1a202c 0%, #2d3748 100%);
        }

        .app-container {
            max-width: 1400px;
            margin: 0 auto;
            position: relative;
            z-index: 1;
        }

        /* Header styling */
        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            position: relative;
            z-index: 10;
        }

        .header-title h1 {
            font-size: 2rem;
            font-weight: 700;
            display: inline-flex;
            align-items: center;
            background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header-emoji {
            display: inline-flex;
            margin-left: 8px;
            margin-right: 4px;
            transform: translateY(2px);
            font-size: 1.8rem;
        }

        .header-title p {
            font-size: 1rem;
            opacity: 0.8;
            margin-top: 8px;
            line-height: 1.6;
        }

        .header-controls {
            display: flex;
            gap: 15px;
        }

        /* Button styles */
        .btn {
            padding: 10px 16px;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            border: none;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            box-shadow: 0 4px 12px rgba(67, 97, 238, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(67, 97, 238, 0.4);
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.8);
            color: var(--text-color);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.9);
            transform: translateY(-2px);
        }

        /* Dark mode toggle */
        .dark-mode-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 100;
            background: rgba(255, 255, 255, 0.2);
            border: none;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .dark-mode-toggle i {
            font-size: 20px;
            color: var(--text-color);
            transition: all 0.3s ease;
        }

        .dark-mode-toggle:hover {
            transform: scale(1.1);
        }

        /* Bento Grid Container */
        .bento-container {
            display: grid;
            grid-template-columns: repeat(12, 1fr);
            gap: var(--grid-gap);
            position: relative;
            min-height: 800px;
        }

        /* Widget styles */
        .widget {
            background: var(--widget-bg);
            border-radius: var(--border-radius);
            box-shadow: var(--widget-shadow);
            padding: 20px;
            position: relative;
            overflow: hidden;
            transition: transform var(--transition-speed), box-shadow var(--transition-speed);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.18);
            display: flex;
            flex-direction: column;
            animation: fadeInUp 0.6s ease forwards;
            animation-fill-mode: both;
        }

        .widget.dragging {
            opacity: 0.9;
            z-index: 100;
            box-shadow: 0 12px 48px rgba(0, 0, 0, 0.2);
            cursor: grabbing;
        }

        .widget.resizing {
            transition: none;
        }

        .widget-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            cursor: move;
        }

        .widget-title {
            font-weight: 600;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .widget-emoji {
            font-size: 20px;
        }

        .widget-actions {
            display: flex;
            gap: 8px;
        }

        .widget-action-btn {
            background: none;
            border: none;
            font-size: 0.9rem;
            cursor: pointer;
            color: #555;
            width: 28px;
            height: 28px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s;
        }

        .dark-mode .widget-action-btn {
            color: #ccc;
        }

        .widget-action-btn:hover {
            background-color: rgba(0, 0, 0, 0.05);
            color: var(--primary-color);
        }

        .dark-mode .widget-action-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .widget-content {
            flex: 1;
            position: relative;
            overflow: hidden;
        }

        .resize-handle {
            position: absolute;
            width: 16px;
            height: 16px;
            background: var(--primary-color);
            border-radius: 50%;
            bottom: 4px;
            right: 4px;
            cursor: nwse-resize;
            z-index: 10;
            opacity: 0;
            transition: opacity 0.2s;
        }

        .widget:hover .resize-handle {
            opacity: 1;
        }

        /* Widget spans - Column sizes */
        .widget-cols-1 { grid-column: span 1; }
        .widget-cols-2 { grid-column: span 2; }
        .widget-cols-3 { grid-column: span 3; }
        .widget-cols-4 { grid-column: span 4; }
        .widget-cols-6 { grid-column: span 6; }
        .widget-cols-8 { grid-column: span 8; }
        .widget-cols-12 { grid-column: span 12; }

        /* Widget heights */
        .widget-rows-1 {
            grid-row: span 1;
            min-height: 200px;
        }

        .widget-rows-2 {
            grid-row: span 2;
            min-height: 400px;
        }

        .widget-rows-3 {
            grid-row: span 3;
            min-height: 600px;
        }

        /* Widget themes */
        .widget-theme-primary {
            background: linear-gradient(135deg, rgba(67, 97, 238, 0.85) 0%, rgba(58, 12, 163, 0.85) 100%);
            color: white;
        }

        .widget-theme-accent {
            background: linear-gradient(135deg, rgba(247, 37, 133, 0.85) 0%, rgba(181, 23, 158, 0.85) 100%);
            color: white;
        }

        .widget-theme-primary .widget-action-btn,
        .widget-theme-accent .widget-action-btn {
            color: rgba(255, 255, 255, 0.7);
        }

        .widget-theme-primary .widget-action-btn:hover,
        .widget-theme-accent .widget-action-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
        }

        /* Ghost element for drag preview */
        .ghost-widget {
            background: rgba(67, 97, 238, 0.2);
            border: 2px dashed var(--primary-color);
            border-radius: var(--border-radius);
            position: absolute;
            z-index: 5;
            pointer-events: none;
        }

        /* Animation keyframes */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes floating {
            0% {
                transform: translateY(0px);
            }
            50% {
                transform: translateY(-6px);
            }
            100% {
                transform: translateY(0px);
            }
        }

        .floating {
            animation: floating 3s ease-in-out infinite;
        }

        /* Responsive styles */
        @media (max-width: 1200px) {
            .bento-container {
                grid-template-columns: repeat(8, 1fr);
            }
        }

        @media (max-width: 768px) {
            .bento-container {
                grid-template-columns: repeat(4, 1fr);
            }
            
            .header {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
            
            .header-controls {
                width: 100%;
                justify-content: flex-start;
            }
        }

        @media (max-width: 480px) {
            .bento-container {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .btn {
                padding: 8px 12px;
                font-size: 14px;
            }
        }
    </style>
</head>
<body>
    <!-- Particle background container -->
    <div id="particles-js"></div>

    <!-- Dark mode toggle -->
    <button class="dark-mode-toggle" id="darkModeToggle">
        <i class="fas fa-moon"></i>
    </button>

    <div class="app-container">
        <header>
            <div class="header-title">
                <h1>Bento Dashboard <span class="header-emoji">🍱</span></h1>
                <p>An elegant, customizable dashboard with drag-and-drop widgets</p>
            </div>
            <div class="header-controls">
                <button class="btn btn-primary" id="addWidgetBtn">
                    <i class="fas fa-plus"></i> Add Widget
                </button>
                <button class="btn btn-secondary" id="saveLayoutBtn">
                    <i class="fas fa-save"></i> Save Layout
                </button>
            </div>
        </header>

        <div class="bento-container" id="bentoContainer">
            <!-- Analytics Widget -->
            <div class="widget widget-cols-4 widget-rows-2" data-widget-id="analytics">
                <div class="widget-header">
                    <div class="widget-title">
                        <span class="widget-emoji">📊</span> Analytics Overview
                    </div>
                    <div class="widget-actions">
                        <button class="widget-action-btn" data-action="refresh"><i class="fas fa-sync-alt"></i></button>
                        <button class="widget-action-btn" data-action="settings"><i class="fas fa-cog"></i></button>
                        <button class="widget-action-btn" data-action="remove"><i class="fas fa-times"></i></button>
                    </div>
                </div>
                <div class="widget-content">
                    <canvas id="analyticsChart"></canvas>
                </div>
                <div class="resize-handle"></div>
            </div>

            <!-- Task Management Widget -->
            <div class="widget widget-cols-4 widget-rows-2" data-widget-id="tasks">
                <div class="widget-header">
                    <div class="widget-title">
                        <span class="widget-emoji">✅</span> Task Manager
                    </div>
                    <div class="widget-actions">
                        <button class="widget-action-btn" data-action="refresh"><i class="fas fa-sync-alt"></i></button>
                        <button class="widget-action-btn" data-action="settings"><i class="fas fa-cog"></i></button>
                        <button class="widget-action-btn" data-action="remove"><i class="fas fa-times"></i></button>
                    </div>
                </div>
                <div class="widget-content">
                    <div class="task-list">
                        <div class="task-item">
                            <input type="checkbox" id="task1">
                            <label for="task1">Complete dashboard MVP</label>
                        </div>
                        <div class="task-item">
                            <input type="checkbox" id="task2">
                            <label for="task2">Implement dark mode toggle</label>
                        </div>
                        <div class="task-item">
                            <input type="checkbox" id="task3">
                            <label for="task3">Add widget drag functionality</label>
                        </div>
                        <div class="task-item">
                            <input type="checkbox" id="task4">
                            <label for="task4">Design responsive layout system</label>
                        </div>
                    </div>
                    <button class="btn btn-primary" style="margin-top: 15px; width: 100%;">
                        <i class="fas fa-plus"></i> Add Task
                    </button>
                </div>
                <div class="resize-handle"></div>
            </div>

            <!-- Weather Widget -->
            <div class="widget widget-cols-4 widget-rows-1 widget-theme-primary" data-widget-id="weather">
                <div class="widget-header">
                    <div class="widget-title">
                        <span class="widget-emoji">🌤️</span> Weather
                    </div>
                    <div class="widget-actions">
                        <button class="widget-action-btn" data-action="refresh"><i class="fas fa-sync-alt"></i></button>
                        <button class="widget-action-btn" data-action="settings"><i class="fas fa-cog"></i></button>
                        <button class="widget-action-btn" data-action="remove"><i class="fas fa-times"></i></button>
                    </div>
                </div>
                <div class="widget-content">
                    <div style="display: flex; align-items: center; justify-content: space-between; height: 100%;">
                        <div style="text-align: center; flex: 1;">
                            <i class="fas fa-sun" style="font-size: 3rem; margin-bottom: 10px; animation: floating 3s ease-in-out infinite;"></i>
                            <h2 style="font-size: 2rem; margin-bottom: 5px;">72°F</h2>
                            <p>Sunny, San Francisco</p>
                        </div>
                        <div style="display: flex; flex-direction: column; gap: 10px; flex: 1;">
                            <div style="display: flex; justify-content: space-between;">
                                <span>Humidity</span>
                                <span>45%</span>
                            </div>
                            <div style="display: flex; justify-content: space-between;">
                                <span>Wind</span>
                                <span>8 mph</span>
                            </div>
                            <div style="display: flex; justify-content: space-between;">
                                <span>UV Index</span>
                                <span>3/10</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="resize-handle"></div>
            </div>

            <!-- Calendar Widget -->
            <div class="widget widget-cols-8 widget-rows-1" data-widget-id="calendar">
                <div class="widget-header">
                    <div class="widget-title">
                        <span class="widget-emoji">📅</span> Calendar
                    </div>
                    <div class="widget-actions">
                        <button class="widget-action-btn" data-action="refresh"><i class="fas fa-sync-alt"></i></button>
                        <button class="widget-action-btn" data-action="settings"><i class="fas fa-cog"></i></button>
                        <button class="widget-action-btn" data-action="remove"><i class="fas fa-times"></i></button>
                    </div>
                </div>
                <div class="widget-content">
                    <div id="calendarContainer"></div>
                </div>
                <div class="resize-handle"></div>
            </div>

            <!-- Quick Notes Widget -->
            <div class="widget widget-cols-4 widget-rows-1 widget-theme-accent floating" data-widget-id="notes">
                <div class="widget-header">
                    <div class="widget-title">
                        <span class="widget-emoji">📝</span> Quick Notes
                    </div>
                    <div class="widget-actions">
                        <button class="widget-action-btn" data-action="refresh"><i class="fas fa-sync-alt"></i></button>
                        <button class="widget-action-btn" data-action="settings"><i class="fas fa-cog"></i></button>
                        <button class="widget-action-btn" data-action="remove"><i class="fas fa-times"></i></button>
                    </div>
                </div>
                <div class="widget-content">
                    <textarea placeholder="Write your notes here..." style="width: 100%; height: 100%; background: transparent; border: none; color: white; resize: none;"></textarea>
                </div>
                <div class="resize-handle"></div>
            </div>
        </div>
    </div>

    <!-- Chart.js for analytics -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <script>
        // Initialize particle background
        document.addEventListener('DOMContentLoaded', function() {
            particlesJS('particles-js', {
                particles: {
                    number: { value: 80, density: { enable: true, value_area: 800 } },
                    color: { value: '#4361EE' },
                    shape: { type: 'circle' },
                    opacity: { value: 0.5, random: false },
                    size: { value: 3, random: true },
                    line_linked: { enable: true, distance: 150, color: '#4361EE', opacity: 0.4, width: 1 },
                    move: { enable: true, speed: 2, direction: 'none', random: false, straight: false, out_mode: 'out' }
                },
                interactivity: {
                    detect_on: 'canvas',
                    events: { onhover: { enable: true, mode: 'grab' }, onclick: { enable: true, mode: 'push' } },
                    modes: { grab: { distance: 140, line_linked: { opacity: 1 } } }
                }
            });
        });

        // Dark mode toggle
        const darkModeToggle = document.getElementById('darkModeToggle');
        const body = document.body;
        
        darkModeToggle.addEventListener('click', () => {
            body.classList.toggle('dark-mode');
            
            if (body.classList.contains('dark-mode')) {
                darkModeToggle.innerHTML = '<i class="fas fa-sun"></i>';
                
                // Update particle colors for dark mode
                if (window.pJSDom && window.pJSDom[0]) {
                    window.pJSDom[0].pJS.particles.color.value = '#F72585';
                    window.pJSDom[0].pJS.particles.line_linked.color = '#F72585';
                    window.pJSDom[0].pJS.fn.particlesRefresh();
                }
            } else {
                darkModeToggle.innerHTML = '<i class="fas fa-moon"></i>';
                
                // Update particle colors for light mode
                if (window.pJSDom && window.pJSDom[0]) {
                    window.pJSDom[0].pJS.particles.color.value = '#4361EE';
                    window.pJSDom[0].pJS.particles.line_linked.color = '#4361EE';
                    window.pJSDom[0].pJS.fn.particlesRefresh();
                }
            }
        });

        // Factory pattern for creating widgets
        function createWidgetElement(config) {
            const { id, title, emoji, content, cols, rows, theme } = config;
            
            const widget = document.createElement('div');
            widget.className = `widget widget-cols-${cols || 4} widget-rows-${rows || 1}`;
            
            if (theme) {
                widget.classList.add(`widget-theme-${theme}`);
            }
            
            widget.dataset.widgetId = id;
            
            const widgetHtml = `
                <div class="widget-header">
                    <div class="widget-title">
                        <span class="widget-emoji">${emoji || '📊'}</span> ${title}
                    </div>
                    <div class="widget-actions">
                        <button class="widget-action-btn" data-action="refresh"><i class="fas fa-sync-alt"></i></button>
                        <button class="widget-action-btn" data-action="settings"><i class="fas fa-cog"></i></button>
                        <button class="widget-action-btn" data-action="remove"><i class="fas fa-times"></i></button>
                    </div>
                </div>
                <div class="widget-content">
                    ${content || ''}
                </div>
                <div class="resize-handle"></div>
            `;
            
            widget.innerHTML = widgetHtml;
            return widget;
        }

        // Initialize drag and drop
        let draggingElement = null;
        let startX, startY;
        let ghostElement = null;
        let currentWidgetRect = null;
        
        // Set up analytics chart
        document.addEventListener('DOMContentLoaded', function() {
            const analyticsCtx = document.getElementById('analyticsChart').getContext('2d');
            const analyticsChart = new Chart(analyticsCtx, {
                type: 'line',
                data: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                    datasets: [{
                        label: 'Visitors',
                        data: [12, 19, 3, 5, 2, 3],
                        borderColor: '#4361EE',
                        backgroundColor: 'rgba(67, 97, 238, 0.1)',
                        tension: 0.4,
                        fill: true
                    },
                    {
                        label: 'Revenue',
                        data: [5, 15, 10, 20, 15, 25],
                        borderColor: '#F72585',
                        backgroundColor: 'rgba(247, 37, 133, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top'
                        }
                    }
                }
            });
        });

        // Event delegation for widget management
        document.addEventListener('mousedown', function(e) {
            // Check if widget header is being clicked for dragging
            const header = e.target.closest('.widget-header');
            if (header) {
                const widget = header.closest('.widget');
                if (widget) {
                    startDrag(widget, e);
                }
            }
            
            // Check if resize handle is being clicked for resizing
            const resizeHandle = e.target.closest('.resize-handle');
            if (resizeHandle) {
                const widget = resizeHandle.closest('.widget');
                if (widget) {
                    startResize(widget, e);
                }
            }
            
            // Handle widget actions (refresh, settings, remove)
            const actionBtn = e.target.closest('.widget-action-btn');
            if (actionBtn) {
                const action = actionBtn.dataset.action;
                const widget = actionBtn.closest('.widget');
                
                if (action === 'remove' && widget) {
                    widget.remove();
                } else if (action === 'refresh' && widget) {
                    refreshWidget(widget);
                } else if (action === 'settings' && widget) {
                    openWidgetSettings(widget);
                }
            }
        });

        // Add widget button handler
        document.getElementById('addWidgetBtn').addEventListener('click', function() {
            const newWidget = createWidgetElement({
                id: 'widget-' + Date.now(),
                title: 'New Widget',
                emoji: '✨',
                content: '<div style="display: flex; justify-content: center; align-items: center; height: 100%;">Widget Content</div>',
                cols: 4,
                rows: 1
            });
            
            document.getElementById('bentoContainer').appendChild(newWidget);
            newWidget.style.animation = 'fadeInUp 0.6s ease forwards';
        });

        // Utility functions for widget actions
        function startDrag(widget, e) {
            draggingElement = widget;
            widget.classList.add('dragging');
            
            currentWidgetRect = widget.getBoundingClientRect();
            startX = e.clientX;
            startY = e.clientY;
            
            // Create ghost element
            ghostElement = document.createElement('div');
            ghostElement.className = 'ghost-widget';
            ghostElement.style.width = currentWidgetRect.width + 'px';
            ghostElement.style.height = currentWidgetRect.height + 'px';
            ghostElement.style.left = currentWidgetRect.left + 'px';
            ghostElement.style.top = currentWidgetRect.top + 'px';
            document.body.appendChild(ghostElement);
            
            document.addEventListener('mousemove', onDrag);
            document.addEventListener('mouseup', stopDrag);
        }

        function onDrag(e) {
            if (!draggingElement || !ghostElement) return;
            
            const dx = e.clientX - startX;
            const dy = e.clientY - startY;
            
            ghostElement.style.left = (currentWidgetRect.left + dx) + 'px';
            ghostElement.style.top = (currentWidgetRect.top + dy) + 'px';
        }

        function stopDrag() {
            if (draggingElement) {
                draggingElement.classList.remove('dragging');
                draggingElement = null;
            }
            
            if (ghostElement) {
                ghostElement.remove();
                ghostElement = null;
            }
            
            document.removeEventListener('mousemove', onDrag);
            document.removeEventListener('mouseup', stopDrag);
        }

        function startResize(widget, e) {
            widget.classList.add('resizing');
            const startWidth = widget.offsetWidth;
            const startHeight = widget.offsetHeight;
            const startX = e.clientX;
            const startY = e.clientY;
            
            function onResize(e) {
                const width = startWidth + (e.clientX - startX);
                const height = startHeight + (e.clientY - startY);
                
                // Update widget size classes based on the grid
                const containerWidth = document.getElementById('bentoContainer').offsetWidth;
                const columnWidth = containerWidth / 12; // Assuming 12-column grid
                
                const newCols = Math.max(1, Math.min(12, Math.round(width / columnWidth)));
                
                // Remove existing column classes
                for (let i = 1; i <= 12; i++) {
                    widget.classList.remove(`widget-cols-${i}`);
                }
                
                // Add new column class
                widget.classList.add(`widget-cols-${newCols}`);
                
                // Handle row height changes
                const rowHeight = 200; // Base row height
                const newRows = Math.max(1, Math.round(height / rowHeight));
                
                // Remove existing row classes
                for (let i = 1; i <= 3; i++) {
                    widget.classList.remove(`widget-rows-${i}`);
                }
                
                // Add new row class
                widget.classList.add(`widget-rows-${newRows}`);
            }
            
            function stopResize() {
                widget.classList.remove('resizing');
                document.removeEventListener('mousemove', onResize);
                document.removeEventListener('mouseup', stopResize);
            }
            
            document.addEventListener('mousemove', onResize);
            document.addEventListener('mouseup', stopResize);
        }

        function refreshWidget(widget) {
            // Add refresh animation
            const content = widget.querySelector('.widget-content');
            content.style.opacity = '0.6';
            
            // Simulate a refresh
            setTimeout(() => {
                content.style.opacity = '1';
            }, 600);
        }

        function openWidgetSettings(widget) {
            // In an MVP, we can simply show an alert
            alert('Widget settings will be available in the next version!');
        }
        
        // Save layout functionality
        document.getElementById('saveLayoutBtn').addEventListener('click', function() {
            const widgets = document.querySelectorAll('.widget');
            const layoutData = [];
            
            widgets.forEach(widget => {
                let colSize = 4; // Default
                let rowSize = 1; // Default
                
                // Extract column size
                for (let i = 1; i <= 12; i++) {
                    if (widget.classList.contains(`widget-cols-${i}`)) {
                        colSize = i;
                        break;
                    }
                }
                
                // Extract row size
                for (let i = 1; i <= 3; i++) {
                    if (widget.classList.contains(`widget-rows-${i}`)) {
                        rowSize = i;
                        break;
                    }
                }
                
                layoutData.push({
                    id: widget.dataset.widgetId,
                    cols: colSize,
                    rows: rowSize,
                    theme: widget.classList.contains('widget-theme-primary') ? 'primary' : 
                           widget.classList.contains('widget-theme-accent') ? 'accent' : '',
                    floating: widget.classList.contains('floating')
                });
            });
            
            // Save layout to localStorage
            localStorage.setItem('bentoLayout', JSON.stringify(layoutData));
            
            // Show confirmation
            alert('Layout saved successfully!');
        });
        
        // Load layout if available
        document.addEventListener('DOMContentLoaded', function() {
            const savedLayout = localStorage.getItem('bentoLayout');
            if (savedLayout) {
                try {
                    const layoutData = JSON.parse(savedLayout);
                    // Apply saved layout (implementation would depend on your widget structure)
                    // This would be implemented in the production version
                } catch (e) {
                    console.error('Error loading saved layout', e);
                }
            }
        });
    </script>
</body>
</html> 
</html> 